Updating Foreign Key Table record is one of the common CRUD
operations.

This document will assume you have already know how to read text from
directory/folder, how to use "POST" in WebAPI,
convert data into JSON string,
convert data into Base64 encoded string.

API url: 
1. https://mrchewitsoftware.com.my:5002/api/SpeicalSealedDHDBUpdate/ ("POST")

Prerequisites:
1. You must either purchase a db/renew a db
2. You must establish a sealed session with the server(can done through PriSecDBClientPanel)
3. Your "Application_Data/SealedCredentials" folder must exist

Steps:
1. You will need to read the name without path from "Application_Data/SealedCredentials/" folder's subfolder.
2. You will need to access the files located inside "Application_Data/SealedCredentials/" folder's subfolder that contains "B64".
3. You will need to read all the base64 encoded string reside within each of files that fulfills the criteria.
4. You will need to access a file named "PaymentID.txt" and read all the ASCII text located within "Application_Data/DBCredentials/" folder.
5. You will need to make sure the SQL Query String is a query string that has been set for preventing SQL Injection and web api server approved.
    Explanation:
      ====SQL Injection prevention query String explanation and example====
      In normal circumstances, we will do something like UPDATE `User_Chat` SET `Messages`=@Messages WHERE `Friend_ID`=@Update_ID0 AND `FK_ID`=@Update_ID1
      This kind of SQL query is a kind of SQL prevention query string.
      =====================================================================

      ====Reserved words and limitations put deliberately==================
      The @ symbol is a reserve symbol used to create a custom parameter
      name.
      Any attempts to supply custom primary key value or custom foreign key
      value was blocked. 
      The primary key value will only comes from server.
      The foreign key value can only be source from primary key value.
      Developers has been banned to use ' character in SQL INSERT or
      UPDATE query.
      =====================================================================

      ==Updating Foreign Key Table record==
      The SQL Injection prevention query for update is UPDATE `User_Chat` SET `Messages`=@Messages WHERE `Friend_ID`=@Update_ID0 AND `FK_ID`=@Update_ID1
      Any other parameter name that is not "Update_ID" will all get encrypted and updated in your own database.
      All custom parameter name that stores foreign key must start from "Update_ID0" and keep on incrementing by 1 to "Update_IDn"
      Any parameter which is not foreign key, their values will all get encrypted with only developer or user able to decrypt them.
      The encrypted parameter values will be stored with Base64 encoded String, make sure when u create columns which are not Foreign
      Key, their storage format is always in text.
      =====================================

      ==Updating Foreign Key Table Foreign Key Value==
      The SQL Injection prevention query for update is UPDATE `User_Chat` SET `Friend_ID`=@New_Update_ID0,`FK_ID`=@New_Update_ID1 WHERE
      `Friend_ID`=@Old_Update_ID0 AND `FK_ID`=@Old_Update_ID1
      Any other parameter name that is not "Update_ID" will all get encrypted and updated in your own database.
      All custom parameter name that stores foreign key must start from either "Old_Update_ID0" and keep on incrementing by 1 to "Old_Update_IDn"
      or "New_Update_ID0" and keep on incrementing by 1 to "New_Update_IDn"
      Any parameter which is not foreign key, their values will all get encrypted with only developer or user able to decrypt them.
      The encrypted parameter values will be stored with Base64 encoded String, make sure when u create columns which are not Foreign
      Key, their storage format is always in text.
      =====================================
      
      The query string must not contain ";" character in it and it must be converted into base64 encoded string.

6. Custom parameter name like @Messages is required by the system, however, due to the system reserve the @ symbol, developer
   only need to supply the custom parameter name without the @ symbol. For example, you will only need to supply the paramter names like 
   "Messages" instead of "@Messages". You will still need to supply proper SQL query that prevents
   SQL injection. You will need to look at UPDATE `User_Chat` SET `Messages`=@Messages WHERE `Friend_ID`=@Update_ID0 AND `FK_ID`=@Update_ID1
   query string query string on the part that has @ symbol. By not touching the original query, you will need to split each of the custom
   parameter names into String Array elements without "@" symbol. At the end it should look something like example below:
   
   Index 0 of String Array: "Messages"

   After you split the custom parameter names into String Array elements without the "@" symbol correctly, you will then require to convert each
   of the String Array element into Base64 encoded String. The Base64 encoded String element within the String Array will then be required to
   transfer all of it into a String Array that accepts only Base64 encoded String.

   You don't need to include reserve parameter names like that contains "Update_ID" into Array.

   ===Update only foreign key values===
   If you only want to update foreign key values, make sure that your base64parametername array is null or empty but the IDValue array and
   NewIDValue array must not be empty or null
   
   You will need to either first update the parameter value in foreign key table then update the foreign key table foreign key value or first
   update the foreign key table foreign key value then update the parameter value.

   You can't do 2 of them in the same time.
   ===================================

7. Custom parameter value will then be required to first store in String Array that has been processed in a similar manner to step 6. The String Array
   will then be required to convert each of the element into Base64 encoded String like step 6. The converted String Array elements will then be
   required to transfer it into String Array that accepts only Base64 encoded String.

   ===Update only foreign key values===
   If you only want to update foreign key values, make sure that your base64parametervalue array is null or empty but the IDValue array and
   NewIDValue array must not be empty or null
   
   You will need to either first update the parameter value in foreign key table then update the foreign key table foreign key value or first
   update the foreign key table foreign key value then update the parameter value.

   You can't do 2 of them in the same time.
   ===================================

8. You will need to specify all the foreign keys values in ASCII String Array. Like Before, you can only supply system generated primary key value
   as foreign key value. 

   Or

   If you want to update only foreign key table foreign key values, you will need to specify all the IDValue and
   NewIDValue array values in ASCII String.

9. You will need to specify to the web API whether you want to use XSalsa20Poly1305 as the symmetric encryption algorithm or XChaCha20Poly1305
    as the symmetric encryption algorithm.

10. Now you need to put 11 values into 11 different variables by following the order below.
    Explanation:
      A. SealedSessionID = The subfolder name without path that retrieved from step 1.
      B. SealedDBName = The SealedDBName that retrieved from step 2 to 3.
      C. SealedDBUserName = The SealedDBUserName that retrieved from step 2 to 3.
      D. SealedDBUserPassword = The SealedDBUserPassword that retrieved from step 2 to 3.
      E. UniquePaymentID = The payment ID that retrieved from step 4.
      F. Base64QueryString = The SQL query string that generated and retrieved from step 5
      G. Base64ParameterName = The SQL custom parameter name Base64 encoded String Array that generated and retrieved from step 6.
      H. Base64ParameterValue = The SQL custom parameter value Base64 encoded String Array that generated and retrieved from step 7.
      I. IDValue = An ASCII string Array that generated and retrieved on step 8.
      J. NewIDValue = An ASCII string Array that generated and retrieved on step 8.
      K. IsXSalsa20Poly1305 = The Boolean value that retrieved from step 9.
    
    Side Note:
    IDValue refers to all the previously inserted foreign key values reside within a foreign key table record.
    NewIDValue refers to the new foreign key values to replace the old foreign key values reside within a foreign key table record.

11. You will need to convert them into JSON Data/String and the final result should look similar to the example below.
    {
      SealedDBCredentialModel:
      {
        "SealedSessionID":"{ASCII String}",
        "SealedDBUserName":"{Base64 Encoded String}",
        "UniquePaymentID":"{ASCII String}",
        "SignedRandomChallenge":"{Base64 Encoded String}"
      },
      "UniquePaymentID":"{ASCII String}",
      "Base64QueryString":"{Base64 Encoded String}",
      "Base64ParameterName":["{Base64 Encoded String}","{Base64 Encoded String}"], Or "Base64ParameterName":null,
      "Base64ParameterValue":["{Base64 Encoded String}","{Base64 Encoded String}"], Or "Base64ParameterValue":null,
      "IDValue":["{ASCII String}","{ASCII String}"],
      "NewIDValue":null, Or "NewIDValue":["{ASCII String}","{ASCII String}"],
      "IsXSalsa20Poly1305":"{Boolean}"
    }

12. You will need to post the converted JSON Data/String at 1st API URL.

13. The response you received will be "String_Value", if the String_Value has anything wrong it should have contain a message with "Error" characters, else it should
    have a success message that shows the generated primary key value(if primary key table) else it will show you a normal success message.

It's better based on this document, you go to try and use the panel. The panel should give you a better Sample JSON Data/String that I put as an example in step 11.
