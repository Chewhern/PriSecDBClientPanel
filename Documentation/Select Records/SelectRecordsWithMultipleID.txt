Selecting records through single PK/FK is one of the common
CRUD operations.

This document will assume you have already know how to read text from
directory/folder, how to use "POST" in WebAPI,
convert data into JSON string,
convert data into Base64 encoded string.

API url: 
1. https://mrchewitsoftware.com.my:5002/api/SpeicalSelectDBRecord/ ("POST")

Prerequisites:
1. You must either purchase a db/renew a db
2. You must establish a sealed session with the server(can done through PriSecDBClientPanel)
3. Your "Application_Data/SealedCredentials" folder must exist

Steps:
1. You will need to read the name without path from "Application_Data/SealedCredentials/" folder's subfolder.
2. You will need to access the files located inside "Application_Data/SealedCredentials/" folder's subfolder that contains "B64".
3. You will need to read all the base64 encoded string reside within each of files that fulfills the criteria.
4. You will need to access a file named "PaymentID.txt" and read all the ASCII text located within "Application_Data/DBCredentials/" folder.
5. You will need to make sure the SQL Query String is a query string that has been set for preventing SQL Injection and web api server approved.
    Explanation:
      ====SQL Injection prevention query String explanation and example====
      In normal circumstances, we will do something like SELECT `Messages` FROM `User_Chat` WHERE `Friend_ID`=@Friend_ID AND `User_ID`=@User_ID
      This kind of SQL query is a kind of SQL prevention query string.
      =====================================================================

      ====Reserved words and limitations put deliberately==================
      The @ symbol is a reserve symbol used to create a custom parameter
      name.
      Any attempts to supply custom primary key value or custom foreign key
      value was blocked. 
      The primary key value will only comes from server.
      The foreign key value can only be source from primary key value.
      Developers has been banned to use ' character in SQL INSERT or
      UPDATE query.
      =====================================================================

      ==SQL SELECT with multiple ID==
      Developer can only use the system generated primary key value as foreign key value.
      Developer need to supply the "ID" with valid system generated primary key value but make sure your query string looks similar 
      to the example below.
      SELECT `Messages` FROM `User_Chat` WHERE `Friend_ID`=@Friend_ID AND `User_ID`=@User_ID
      ====================
      
      The query string must not contain ";" character in it and it must be converted into base64 encoded string.

6. Custom parameter name like @ID And @User_ID is required by the system, however, due to the system reserve the @ symbol, developer
   only need to supply the custom parameter name without the @ symbol. For example, you will only need to supply the paramter names like 
   "User_ID,Friend_ID" instead of "@User_ID,@Friend_ID". You will still need to supply proper SQL query that prevents
   SQL injection. You will need to look at SELECT `Messages` FROM `User_Chat` WHERE `Friend_ID`=@Friend_ID AND `User_ID`=@User_ID
   query string then look at the parameter name with @ reserve symbol on it. By not touching the original query, you will need to split the custom
   parameter name into String Array like the example below. 

   Parameter Name String Array Index 0: "User_ID"
   Parameter Name String Array Index 1: "Friend_ID"
   
   You will need to convert each of the parameter name string array element into base 64 encoded string and then transfer the base64 encoded
   string into String array that stores only Base64 encoded string.

7. Same procedure with the parameter value as shown in step 6

8. Now you need to put 11 values into 11 different variables by following the order below.
    Explanation:
      A. SealedSessionID = The subfolder name without path that retrieved from step 1.
      B. SealedDBName = The SealedDBName that retrieved from step 2 to 3.
      C. SealedDBUserName = The SealedDBUserName that retrieved from step 2 to 3.
      D. SealedDBUserPassword = The SealedDBUserPassword that retrieved from step 2 to 3.
      E. UniquePaymentID = The payment ID that retrieved from step 4.
      F. Base64QueryString = The SQL query string that generated and retrieved from step 5
      G. Base64ParameterName = The SQL custom parameter name Base64 encoded String Array that generated and retrieved from step 6.
      H. Base64ParameterValue = The SQL custom parameter value Base64 encoded String Array that generated and retrieved from step 7.
9. You will need to convert them into JSON Data/String and the final result should look similar to the example below.
    {
      SealedDBCredentialModel:
      {
        "SealedSessionID":"{ASCII String}",
        "SealedDBUserName":"{Base64 Encoded String}",
        "UniquePaymentID":"{ASCII String}",
        "SignedRandomChallenge":"{Base64 Encoded String}"
      },
      "UniquePaymentID":"{ASCII String}",
      "Base64QueryString":"{Base64 Encoded String}",
      "Base64ParameterName": ["{Base64 Encoded String}","{Base64 Encoded String}"],
      "Base64ParameterValue": ["{Base64 Encoded String}","{Base64 Encoded String}"]
    }
10. You will need to post the converted JSON Data/String at 1st API URL.
11. The response you received will be JSON Data/String shown similar to below (It depends on your SQL select query string).
    {
      "status":"Successed: Records have been retrieved from specified database table",
      "parameterValues":
      ["QR2/A9/EyZr25qmAOg0KuW8IvDXWsrOg0RJhsHUROiVd2myG+wBWnHVnR6FeZ2ov3h4=",
      "6SCkdAgkJEMDBrW4s2Be1jA5f+CTap2njeG4AodWyVw3I2fACSgLZR2pTEjP15S8Wfs="]
    }

It's better based on this document, you go to try and use the panel. The panel should give you a better Sample JSON Data/String that I put as an example in step 9.

In the panel, it's advised to not "select *" as it will also select the PK/FK in the table that u created. The reason behind it is the panel will automatically
help you decrypt the fetched JSON Data/String. However, because the PK/FK is ASCII string rather than Base64 Encoded String, it does not get encrypted hence
decryption on the ASCII string will result in program termination.

It's up to the developer to figure out each of the fetched parametervalues belongs to which column within a table. This may not be a concern if you put a proper
SQL Select query String.
